# Copyright (c) 2014-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.

function(lldpdMain)
  generateLibevent()
  generateLiblldpd()
endfunction()

function(generateLibevent)
  set(library_root "${CMAKE_CURRENT_SOURCE_DIR}/src/libevent")

  add_library(thirdparty_libevent
    "${library_root}/event.c"
    "${library_root}/evthread.c"
    "${library_root}/buffer.c"
    "${library_root}/bufferevent_sock.c"
    "${library_root}/bufferevent.c"
    "${library_root}/bufferevent_filter.c"
    "${library_root}/bufferevent_pair.c"
    "${library_root}/listener.c"
    "${library_root}/bufferevent_ratelim.c"
    "${library_root}/log.c"
    "${library_root}/evmap.c"
    "${library_root}/evutil.c"
    "${library_root}/evutil_rand.c"
    "${library_root}/select.c"
    "${library_root}/strlcpy.c"
    "${library_root}/poll.c"
    "${library_root}/signal.c"
    "${library_root}/epoll.c"
    "${library_root}/event_tagging.c"
    "${library_root}/evdns.c"
    "${library_root}/http.c"
    "${library_root}/evrpc.c"
  )

  target_compile_definitions(thirdparty_libevent PRIVATE
    _FORTIFY_SOURCE=2
    _GNU_SOURCE
  )

  target_link_libraries(thirdparty_libevent PUBLIC
    global_c_settings
  )

  target_link_libraries(thirdparty_libevent PRIVATE
    thirdparty_source_module_warnings
  )

  target_include_directories(thirdparty_libevent PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}/config/libevent"

    "${library_root}"
    "${library_root}/include"
    "${library_root}/compat"
  )

  target_include_directories(thirdparty_libevent SYSTEM INTERFACE
    "${CMAKE_CURRENT_SOURCE_DIR}/config/libevent"
    "${library_root}/include"
  )
endfunction()

function(generateLiblldpd)
  set(library_root "${CMAKE_CURRENT_SOURCE_DIR}/src/src")

  add_library(thirdparty_lldpd
    "${CMAKE_CURRENT_SOURCE_DIR}/generated/src/lib/atom-glue.c"

    "${library_root}/compat/strlcpy.c"
    "${library_root}/compat/setproctitle.c"
    "${library_root}/compat/empty.c"
    "${library_root}/compat/strtonum.c"
    "${library_root}/log.c"
    "${library_root}/version.c"
    "${library_root}/marshal.c"
    "${library_root}/ctl.c"
    "${library_root}/daemon/main.c"
    "${library_root}/lib/atom.c"
    "${library_root}/lib/connection.c"
    "${library_root}/lib/helpers.c"
    "${library_root}/lib/errors.c"
    "${library_root}/lib/fixedpoint.c"
    "${library_root}/client/lldpcli.c"
    "${library_root}/client/display.c"
    "${library_root}/client/conf.c"
    "${library_root}/client/commands.c"
    "${library_root}/client/show.c"
    "${library_root}/client/misc.c"
    "${library_root}/client/tokenizer.c"
    "${library_root}/client/text_writer.c"
    "${library_root}/client/kv_writer.c"
    "${library_root}/lldpd-structs.c"
    "${library_root}/lib/atoms/dot3.c"
    "${library_root}/lib/atoms/dot1.c"
    "${library_root}/lib/atoms/config.c"
    "${library_root}/lib/atoms/interface.c"
    "${library_root}/lib/atoms/med.c"
    "${library_root}/lib/atoms/port.c"
    "${library_root}/lib/atoms/mgmt.c"
    "${library_root}/lib/atoms/custom.c"
    "${library_root}/lib/atoms/chassis.c"
    "${library_root}/client/conf-med.c"
    "${library_root}/client/conf-dot3.c"
    "${library_root}/client/conf-power.c"
    "${library_root}/client/conf-lldp.c"
    "${library_root}/client/conf-system.c"
    "${library_root}/daemon/client.c"
    "${library_root}/daemon/event.c"
    "${library_root}/daemon/frame.c"
    "${library_root}/daemon/interfaces.c"
    "${library_root}/daemon/lldpd.c"
    "${library_root}/daemon/main.c"
    "${library_root}/daemon/netlink.c"
    "${library_root}/daemon/pattern.c"
    "${library_root}/daemon/priv.c"
    "${library_root}/daemon/privsep.c"
    "${library_root}/daemon/privsep_fd.c"
    "${library_root}/daemon/privsep_io.c"
    "${library_root}/daemon/protocols/cdp.c"
    "${library_root}/daemon/protocols/edp.c"
    "${library_root}/daemon/protocols/lldp.c"
    "${library_root}/daemon/protocols/sonmp.c"
  )

  if(DEFINED PLATFORM_MACOS)
    target_sources(thirdparty_lldpd PRIVATE
      "${library_root}/daemon/dmi-osx.c"
      "${library_root}/daemon/forward-bsd.c"
      "${library_root}/daemon/interfaces-bsd.c"
      "${library_root}/daemon/priv-bsd.c"
    )

  elseif(DEFINED PLATFORM_LINUX)
    target_sources(thirdparty_lldpd PRIVATE
      "${library_root}/daemon/dmi-linux.c"
      "${library_root}/daemon/forward-linux.c"
      "${library_root}/daemon/interfaces-linux.c"
      "${library_root}/daemon/priv-linux.c"
    )
  else()
    target_sources(thirdparty_lldpd PRIVATE
      "${library_root}/daemon/dmi-dummy.c"
    )
  endif()

  target_compile_definitions(thirdparty_lldpd PRIVATE
    _FORTIFY_SOURCE=2
    _GNU_SOURCE
    HAVE_CONFIG_H
    SYSCONFDIR=\"/usr/local/etc\"
    LLDPCLI_PATH="/usr/local/sbin/lldpcli"
    PIC
  )

  target_link_libraries(thirdparty_lldpd PUBLIC
    global_c_settings
    thirdparty_libevent
  )

  target_link_libraries(thirdparty_lldpd PRIVATE
    thirdparty_source_module_warnings
  )

  target_include_directories(thirdparty_lldpd PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}/config/liblldpd"

    "${library_root}"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/include"
    "${library_root}/lib"
    "${library_root}/daemon"
  )

  set(public_header_list
    lldp-const.h
    lib/lldpctl.h
  )

  configure_file(
    "${library_root}/lldp-const.h"
    "${CMAKE_CURRENT_BINARY_DIR}/include/lldp-const.h"
    COPYONLY
  )

  configure_file(
    "${library_root}/lib/lldpctl.h"
    "${CMAKE_CURRENT_BINARY_DIR}/include/lldpctl.h"
    COPYONLY
  )

  target_include_directories(thirdparty_lldpd SYSTEM INTERFACE
    "${CMAKE_CURRENT_BINARY_DIR}/include"
  )
endfunction()

lldpdMain()
